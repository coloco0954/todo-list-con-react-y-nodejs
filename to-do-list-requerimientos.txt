Frontend (React)
Funcionalidades Frontend

Interfaz de Usuario (UI):

Diseño de la lista de tareas:
Utilizar un diseño responsivo.
Implementar estilos con CSS-in-JS (por ejemplo, styled-components) o con una librería de UI como Material-UI.
Formulario para agregar nuevas tareas:
Campo de entrada para el título de la tarea. (hecho)
Campo de entrada para la descripción de la tarea. (hecho)
Fecha de vencimiento de la tarea (opcional). (no se hara)
Selector de prioridad (Baja, Media, Alta). (hecho)
Botón para agregar la nueva tarea. (hecho)
Botones para marcar tareas como completadas, editar y eliminar:
Botón para marcar una tarea como completada (checkbox o botón). (hecho)
Botón para editar una tarea. (hecho)
Botón para eliminar una tarea. (hecho)
Gestión de Tareas:

Mostrar la lista de tareas desde la API.
Permitir al usuario agregar nuevas tareas. (hecho)
Permitir al usuario marcar tareas como completadas. (hecho)
Permitir al usuario editar el título, descripción, fecha de vencimiento y prioridad de las tareas existentes. (hecho)
Permitir al usuario eliminar tareas. (hecho)
Elementos Gráficos y Componentes

Componente de Lista de Tareas:

Mostrar cada tarea con su título, descripción, fecha de vencimiento, prioridad y botones de acción. (hecho)
Implementar la lógica para marcar tareas como completadas y eliminar tareas.
Componente de Formulario de Nueva Tarea:

Input para ingresar el título de la nueva tarea. (hecho)
Textarea para la descripción de la tarea. (hecho)
Input para la fecha de vencimiento. (no se hara)
Dropdown para seleccionar la prioridad. (hecho)
Botón para enviar la nueva tarea al servidor. (hecho)
Input para buscar notas por su titulo (hecho)
Boton para mostrar las tareas completadas (pendiente)
Componente de Edición de Tarea: 

Input editable para cambiar el título de una tarea existente. (hecho)
Textarea editable para cambiar la descripción. (hecho)
Input para modificar la fecha de vencimiento. (no se hara)
Dropdown para cambiar la prioridad. (hecho)
Botones para guardar los cambios o cancelar la edición. (hecho)
Estados con useState:

Estados en el componente principal de la lista de tareas:

const [tasks, setTasks] = useState([]); // Almacena la lista de tareas.
const [loading, setLoading] = useState(false); // Indica si los datos están cargando.
const [error, setError] = useState(null); // Almacena errores de carga.
Estados en el componente de formulario de nueva tarea:

const [title, setTitle] = useState(''); // Almacena el título de la nueva tarea.
const [description, setDescription] = useState(''); // Almacena la descripción de la nueva tarea.
const [dueDate, setDueDate] = useState(''); // Almacena la fecha de vencimiento de la nueva tarea.
const [priority, setPriority] = useState('low'); // Almacena la prioridad de la nueva tarea.
const [formError, setFormError] = useState(null); // Almacena errores del formulario.
Estados en el componente de edición de tarea:

const [editTitle, setEditTitle] = useState(task.title); // Almacena el título editado de la tarea.
const [editDescription, setEditDescription] = useState(task.description); // Almacena la descripción editada de la tarea.
const [editDueDate, setEditDueDate] = useState(task.dueDate); // Almacena la fecha de vencimiento editada.
const [editPriority, setEditPriority] = useState(task.priority); // Almacena la prioridad editada.
Backend (Node.js con Express)
Funcionalidades Backend

Endpoints de la API:

GET /api/tasks: Obtener todas las tareas. (hecho)
POST /api/tasks: Crear una nueva tarea. (hecho)
PUT /api/tasks/:id: Actualizar el título, descripción, fecha de vencimiento y prioridad de una tarea existente. (hecho)
DELETE /api/tasks/:id: Eliminar una tarea por su ID. (hecho)
PATCH /api/tasks/:id/completed: Marcar una tarea como completada. (hecho)
Lógica de Negocio:

Validar los datos de entrada para las operaciones de creación y actualización de tareas. (hecho)
Implementar la lógica para interactuar con la lista de tareas en memoria o una base de datos simple (por ejemplo, MongoDB o SQLite). (hecho)
Consideraciones Adicionales:

Middleware:
Implementar middleware para manejar errores y realizar el parsing del cuerpo de las solicitudes (por ejemplo, express.json() para el body parser). (hecho)
Implementar middleware para la autenticación si es necesario. (a lo mejor xd)
CORS:
Configurar el middleware de CORS para permitir solicitudes desde el frontend. (hecho)
Conclusión
Dividiendo las funcionalidades de esta manera, puedes enfocarte primero en desarrollar la interfaz de usuario con React, asegurándote de implementar correctamente la gestión de tareas. Luego, puedes trabajar en el backend con Node.js y Express para crear la API que maneje las operaciones CRUD de las tareas. Esto te permitirá construir paso a paso una aplicación funcional de To-Do List. Si tienes más preguntas o necesitas detalles adicionales sobre alguna parte específica, estoy aquí para ayudarte.

Diseño de la pagina
header con input de busqueda en lado izquierdo y switch toggle y boton de ayuda de lado derecho (hecho)
cuerpo de la pagina
input para agregar descripcion a la tarea (hechi)
menu desplegable en el que se mostraran input para agregar titulo a la tarea, select para elegir la prioridad (hecho)
boton para mostrar las tareas completadas (pendiente)
las tareas completadas se mostraran con un color gris que las diferencie, solo tendran habilitado el boton de eliminar (se hizo diferente)
Si no se agrega un titulo se le pondra un titulo generico (sin_titulo+1) (hecho)
cuerpo de la tarea
checkbox de completado hasta la izquierda (hecho)
titulo de la tarea despues del checkbox (hecho)
de lado derecho botones de accion (editar, eliminar) (hecho)
al final un boton que mostrara la descripcion de la tarea (hecho)
agregar boton que despliegue un menu para poner filtros (todos, completados, incompletos)